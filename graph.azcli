##########################################################
# Examples of Azure Graph queries and useful commands
#
# Jose Moreno, October 2021
##########################################################

# Sample queries
# See more in https://docs.microsoft.com/azure/governance/resource-graph/samples/advanced?tabs=azure-cli

# Kubernetes
query="where type=~'microsoft.containerservice/managedclusters'"
query="where type=='microsoft.containerservice/managedclusters' | distinct id"
query="where type=='microsoft.containerservice/managedclusters' | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where sku.tier=='Paid' | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where properties.publicNetworkAccess=='Enabled' and isnull(properties.apiServerAccessProfile) | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where isnotnull(properties.networkProfile.networkPolicy) | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where isnotnull(properties.addonProfiles.httpApplicationRouting) | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where isnotnull(properties.addonProfiles.omsagent) | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where isnotnull(properties.addonProfiles.aciConnectorLinux) and properties.addonProfiles.aciConnectorLinux.enabled==true | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where properties.nodeResourceGroup \!startswith 'MC_' | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | project name=name+"-"properties.agentPoolProfiles[].name"
query="where type=='microsoft.containerservice/managedclusters' | project resourceGroup,name,pools=properties.agentPoolProfiles | mv-expand pools | where pools.osDiskType=='Managed' | project name=strcat(name,'-',pools.name), resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | project resourceGroup,name,pools=properties.agentPoolProfiles | mv-expand pools | where pools.mode=='User' | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | project resourceGroup,name,pools=properties.agentPoolProfiles | project name,resourceGroup,poolcount=array_length(pools) | where poolcount > 1"
query="where type=='microsoft.containerservice/managedclusters' | where isnull(zones) | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where properties.servicePrincipalProfile.clientId=='msi' | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | where isnull(properties.aadProfile) | distinct name,resourceGroup"
query="where type=='microsoft.containerservice/managedclusters' | project resourceGroup,name,pools=properties.agentPoolProfiles | mv-expand pools | project subnetId=tostring(pools.vnetSubnetID) | where isnotempty(subnetId)"
query="where type=='microsoft.network/virtualnetworks' | project resourceGroup,name,enableDdosProtection=properties.enableDdosProtection,subnets=properties.subnets | mv-expand subnets | project resourceGroup,name,enableDdosProtection,subnetId=tostring(subnets.id)"
query="Resources | where type=~'microsoft.containerservice/managedclusters' | project resourceGroup,name,pools=properties.agentPoolProfiles 
| mv-expand pools 
| project subnetId=tostring(pools.vnetSubnetID)
| where isnotempty(subnetId) 
| join (Resources | where type=='microsoft.network/virtualnetworks' 
| project resourceGroup,name,enableDdosProtection=tostring(properties.enableDdosProtection),subnets=properties.subnets 
| mv-expand subnets 
| project resourceGroup,name,enableDdosProtection,subnetId=tostring(subnets.id)) on subnetId
| distinct resourceGroup,name,enableDdosProtection
| where enableDdosProtection == 'false'"

# Network
query="where type=='microsoft.network/routetables' | where properties.disableBgpRoutePropagation==true | distinct name,resourceGroup"
query="where type=='microsoft.network/virtualnetworkgateways' | where tolower(properties.gatewayType) == 'vpn' | project  name,resourceGroup,ipcount=array_length(properties.ipConfigurations) | where ipcount==1"
query="where type=='microsoft.network/networksecuritygroups'"
query="resources | where type == 'microsoft.network/virtualnetworks' | extend addressSpace = todynamic(properties.addressSpace) | extend addressPrefix = todynamic(properties.addressSpace.addressPrefixes) | mvexpand addressSpace | mvexpand addressPrefix | project name, id, location, resourceGroup, subscriptionId, cidr = addressPrefix | extend compliant = (cidr matches regex @'^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.)')  | project id, compliant, cidr"
query="resources | where type == 'microsoft.network/virtualnetworks' | mvexpand properties.virtualNetworkPeerings | project id, peeringName=properties_virtualNetworkPeerings.name, compliant = (properties_virtualNetworkPeerings.properties.allowVirtualNetworkAccess == True)"
# - AZ-redundant VNGs
query="resources | where type=='microsoft.network/virtualnetworkgateways' | where properties.gatewayType == 'Vpn' | extend compliant = (not (tolower(properties.sku.name) contains 'az')) | distinct id, compliant"
# - Check "disable gateway propagation for RTs attached to GatewaySubnet"
query="Resources | where type=='microsoft.network/virtualnetworks' 
| project id,resourceGroup,name,subnets=properties.subnets 
| mv-expand subnets
| project id,resourceGroup,name,subnetName=tostring(subnets.name),routeTableId=tostring(subnets.properties.routeTable.id)
| where subnetName == 'GatewaySubnet'
| join (Resources | where type == 'microsoft.network/routetables' 
| project routeTableName=name,routeTableId=id, disableBgpRoutePropagation=properties.disableBgpRoutePropagation
) on routeTableId
| project id,compliant = (disableBgpRoutePropagation == False)"
# Inbound deny-any in NSGs
query="where type=='microsoft.network/networksecuritygroups' | mvexpand properties.securityRules | project id,name,ruleAction=properties_securityRules.properties.access,rulePriority=properties_securityRules.properties.priority,ruleDst=properties_securityRules.properties.destinationAddressPrefix,ruleSrc=properties_securityRules.properties.sourceAddressPrefix,ruleProt=properties_securityRules.properties.protocol,ruleDirection=properties_securityRules.properties.direction,rulePort=properties_securityRules.properties.destinationPortRange | summarize StarDenies=countif(ruleAction=='Deny' and ruleDst=='*' and ruleSrc=='*' and ruleProt=='*' and rulePort=='*') by id,tostring(ruleDirection) | where ruleDirection == 'Inbound' | project id,compliant=(StarDenies>0)"
# NSGs with custom rules (not relying on default config)
query="where type=='microsoft.network/networksecuritygroups' | extend compliant=(array_length(properties.securityRules)==0) | project name,id,compliant"
# Union of both
query="resources | where type=='microsoft.network/networksecuritygroups' | mvexpand properties.securityRules | project id,name,ruleAction=properties_securityRules.properties.access,rulePriority=properties_securityRules.properties.priority,ruleDst=properties_securityRules.properties.destinationAddressPrefix,ruleSrc=properties_securityRules.properties.sourceAddressPrefix,ruleProt=properties_securityRules.properties.protocol,ruleDirection=properties_securityRules.properties.direction,rulePort=properties_securityRules.properties.destinationPortRange | summarize StarDenies=countif(ruleAction=='Deny' and ruleDst=='*' and ruleSrc=='*' and ruleProt=='*' and rulePort=='*') by id,tostring(ruleDirection) | where ruleDirection == 'Inbound' | project id,compliant=(StarDenies>0)
| union (resources | where type=='microsoft.network/networksecuritygroups' | where array_length(properties.securityRules)==0 | extend compliant=false | project id,compliant)"
# Subnets without NSGs
query="Resources | where type=='microsoft.network/virtualnetworks' | project id,resourceGroup,name,subnets=properties.subnets | mv-expand subnets | project id,name,subnetName=subnets.name,subnetNsg=subnets.properties.networkSecurityGroup | where not (subnetName in ('GatewaySubnet', 'AzureFirewallSubnet', 'RouteServerSubnet', 'AzureBastionSubnet')) | extend compliant = isnotnull(subnetNsg)"
# AFD WAF enabled and in prevention mode
query="Resources | where type == 'microsoft.network/frontdoorwebapplicationfirewallpolicies' | project policyName=name, policyId=id,policySku=sku.name, links=properties.securityPolicyLinks, enabledState=properties.policySettings.enabledState, mode=properties.policySettings.mode | mvexpand links | extend securityPolicy=links.id | extend securityPolicyParts=split(securityPolicy, '/') | extend profileId=strcat_array(array_slice(securityPolicyParts, 0, -3), '/') | project id=profileId, compliant=((enabledState=='Enabled') and (mode=='Prevention')), enabledState, mode"
# AFD
query="Resources | where type == 'microsoft.network/frontdoorwebapplicationfirewallpolicies'"
query="Resources | where type =='microsoft.cdn/profiles/afdendpoints'"
query="Resources | where type =='microsoft.cdn/profiles'"


# To Do
# AFD with single origin, no probes
# AFD: same FQDN as origin

# See available types
query="distinct type"

# Advanced properties
query="Resources | where type == 'microsoft.compute/virtualmachines' | summarize count() by tostring(properties.extended.instanceView.powerState.code)

# Run query
az graph query -q "$query" --query data -o tsv