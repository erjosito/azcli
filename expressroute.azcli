#################################
# Commands to test ExpressRoute
#
# Jose Moreno, April 2021
#################################

# Control
location=germanywestcentral
er_location=germanywestcentral
er_pop=Frankfurt
er_circuit_sku=Standard
create_spokes=no
number_of_spokes=2
simulate_onprem=no

# Other possible pop/region combinations with megaport:
# location=germanywestcentral
# er_location=germanywestcentral
# er_pop=Frankfurt
# location=southcentralus
# er_location=southcentralus
# er_pop=Dallas
# location=australiaeast
# er_location=australiaeast
# er_pop=Sydney

# Variables
rg=ertest
er_provider=Megaport
er_circuit_name="er-$er_pop"
ergw_name="ergw-$er_pop"
ergw_pip="${ergw_name}-pip"
vnet_name="ervnet-$er_pop"
vnet_prefix=192.168.0.0/24
vm_subnet_name=vm
vm_subnet_prefix=192.168.0.64/26
gw_subnet_prefix=192.168.0.0/26
vm_name="vm-${er_pop}"
vm_pip_name="${vm_name}-pip"
vm_size=Standard_B1s
mcr_asn=65001
megaport_script_path="/home/jose/repos/azcli/megaport.sh"
# gcloud (to simulate onprem ER)
project_name=onprem
project_id="${project_name}${RANDOM}"
machine_type=e2-micro
gcp_asn=16550
region=europe-west3  # other values: europe-west3, australia-southeast1
zone=europe-west3-b  # other values: europe-west3-b, australia-southeast1-b
gcp_vm_name=vm
gcp_vpc_name=vpc
gcp_subnet_name=vm
gcp_subnet_prefix='10.4.2.0/24'
attachment_name=attachment
router_name=router

# Create RG
echo "Creating resource group..."
az group create -n $rg -l $location -o none

# Create ER circuit
az network express-route create -n $er_circuit_name --peering-location $er_pop -g $rg -o none \
    --bandwidth 50 Mbps --provider $er_provider -l $er_location --sku-family MeteredData --sku-tier $er_circuit_sku
service_key=$(az network express-route show -n $er_circuit_name -g $rg --query serviceKey -o tsv)

# Provision Megaport MCR in location
megaport_script_path="/home/jose/repos/azcli/megaport.sh"
if [[ -e "$megaport_script_path" ]]
then
    echo "Creating Megaport Cloud Router and configuring circuit..."
    $megaport_script_path -s=jomore-${er_pop} -a=create_mcr -k=$service_key --asn=$mcr_asn
    sleep 60  # Wait 1 minute before creating the connections. This could be replaced with a loop checking ./megaport.sh -a=list_live
    $megaport_script_path -s=jomore-${er_pop} -a=create_vxc -k=$service_key
else
    echo "Sorry, I cannot seem to find the script $megaport_script_path to interact with the Megaport API"
fi

# Create VNet and test VM
echo "Creating VNet and VM..."
az network vnet create -g $rg -n $vnet_name --address-prefix $vnet_prefix --subnet-name $vm_subnet_name --subnet-prefix $vm_subnet_prefix -l $location -o none
az vm create -n $vm_name -g $rg -l $location --image ubuntuLTS --generate-ssh-keys --nsg "${vm_name}-nsg" -o none \
    --public-ip-address $vm_pip_name --vnet-name $vnet_name --size $vm_size --subnet $vm_subnet_name -l $location

# Create ER Gateway and connect it to circuit
echo "Creating ER Gateway..."
az network vnet subnet create -g $rg --vnet-name $vnet_name -n GatewaySubnet --address-prefix $gw_subnet_prefix -o none
az network public-ip create -g $rg -n $ergw_pip --allocation-method Dynamic --sku Basic -l $location -o none
az network vnet-gateway create -g $rg -n $ergw_name --gateway-type ExpressRoute --sku Standard -l $location --vnet $vnet_name --public-ip-addresses $ergw_pip -o none
circuit_id=$(az network express-route show -n $er_circuit_name -g $rg -o tsv --query id)
echo "Connecting ER Gateway to circuit $circuit_id..."
az network express-route update -n "$er_circuit_name" -g $rg -o none    # sometimes you need to refresh the circuit
az network vpn-connection create -n "${ergw_name}-${er_pop}" -g $rg -l $location --vnet-gateway1 $ergw_name --express-route-circuit2 $circuit_id -o none

# Optional: create spoke associated to the previous VNet and configure the Hub VM as NVA
if [[ "$create_spokes" == "yes" ]]; then
    # IP fwding in hub VM
    echo "Getting information from hub VM..."
    hub_vm_pip=$(az network public-ip show -n $vm_pip_name --query ipAddress -o tsv -g $rg) && echo $hub_vm_pip
    hub_vm_nic_id=$(az vm show -n $vm_name -g $rg --query 'networkProfile.networkInterfaces[0].id' -o tsv)
    hub_vm_ip=$(az network nic show --ids $hub_vm_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv) && echo $hub_vm_ip
    echo "Enabling IP forwarding in hub VM..."
    az network nic update --ids $hub_vm_nic_id --ip-forwarding -o none
    ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_vm_pip "sudo sysctl -w net.ipv4.ip_forward=1"
    # Route table for spokes
    myip=$(curl -s4 ifconfig.co)
    az network route-table create -n spokes-${er_pop} -g $rg -l $location --disable-bgp-route-propagation -o none
    az network route-table route create --route-table-name spokes-${er_pop} -g $rg --address-prefix "0.0.0.0/0" --name default --next-hop-type VirtualAppliance --next-hop-ip-address "$hub_vm_ip" -o none
    az network route-table route create --route-table-name spokes-${er_pop} -g $rg --address-prefix "${myip}/32" --name mypc --next-hop-type Internet -o none
    # Route table for hub VM (empty)
    az network route-table create -n hub-${er_pop} -g $rg -l $location -o none
    az network vnet subnet update -g $rg --vnet-name $vnet_name -n $vm_subnet_name --route-table hub-${er_pop} -o none
    # Route table for hub GatewaySubnet??
    az network route-table create -n vng-${er_pop} -g $rg -l $location -o none
    az network vnet subnet update -g $rg --vnet-name $vnet_name -n GatewaySubnet --route-table vng-${er_pop} -o none
    # Create spokes
    for spoke_id in {1..$number_of_spokes}; do
        spoke_vnet_name="ervnet-${er_pop}-spoke${spoke_id}"
        spoke_vm_name="vm-${er_pop}-spoke${spoke_id}"
        spoke_vnet_prefix=192.168.${spoke_id}.0/24
        spoke_vm_subnet_name=vm
        spoke_vm_subnet_prefix=192.168.${spoke_id}.64/26
        spoke_vm_pip_name="${spoke_vm_name}-pip"
        # Create VNet, VNet peerings and VM
        echo "Creating spoke ${spoke_vnet_name}..."
        az network vnet create -g $rg -n $spoke_vnet_name --address-prefix $spoke_vnet_prefix --subnet-name $spoke_vm_subnet_name --subnet-prefix $spoke_vm_subnet_prefix -l $location -o none
        az vm create -n $spoke_vm_name -g $rg -l $location --image ubuntuLTS --generate-ssh-keys --nsg "${vm_name}-nsg" --public-ip-sku Standard \
            --public-ip-address $spoke_vm_pip_name --vnet-name $spoke_vnet_name --size $vm_size --subnet $spoke_vm_subnet_name -l $location --no-wait -o none
        az network vnet peering create -n "hubtospoke${spoke_id}" -g $rg --vnet-name $vnet_name --remote-vnet $spoke_vnet_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit -o none
        az network vnet peering create -n "spoke${spoke_id}tohub" -g $rg --vnet-name $spoke_vnet_name --remote-vnet $vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways -o none
        # Verify spoke VM (before applying RT)
        # spoke_vm_nic_id=$(az vm show -n $spoke_vm_name -g $rg --query 'networkProfile.networkInterfaces[0].id' -o tsv)
        # az network nic show-effective-route-table --ids $spoke_vm_nic_id -o table
        # echo "Verifying VM ${spoke_vm_name}..."
        # spoke_vm_pip=$(az network public-ip show -n $spoke_vm_pip_name --query ipAddress -o tsv -g $rg) && echo $spoke_vm_pip
        # ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $spoke_vm_pip "ip a"
        # Attach RT to VM subnet
        az network vnet subnet update -g $rg --vnet-name $spoke_vnet_name -n $spoke_vm_subnet_name --route-table spokes-${er_pop} -o none
        # Update the VNG route table
        az network route-table route create --route-table-name vng-${er_pop} -g $rg --address-prefix $spoke_vnet_prefix --name $spoke_vnet_name --next-hop-type VirtualAppliance --next-hop-ip-address "$hub_vm_ip" -o none
    done
fi

##############################################################
# Optional: Create GlobalReach connection between 2 circuits #
##############################################################

circuit1_name=er-Frankfurt
circuit2_name=er-Dallas
circuit2_id=$(az network express-route show -n $circuit2_name -g $rg -o tsv --query id)
ip_range=172.16.31.0/29
az network express-route peering connection create -g $rg --circuit-name $circuit1_name --peering-name AzurePrivatePeering \
    -n "${circuit1_name}-to-${circuit2_name}" --peer-circuit $circuit2_id --address-prefix $ip_range
# az network express-route peering connection delete -n "${circuit1_name}-to-${circuit2_name}" -g $rg --circuit-name $circuit1_name --peering-name AzurePrivatePeering

###################################################
# Optional: create second Vnet to simulate onprem #
###################################################

if [[ "$simulate_onprem" == "yes" ]]
then
    # Variables
    onprem_er_location=germanywestcentral
    onprem_er_pop=Frankfurt
    onprem_er_provider=Megaport
    onprem_er_circuit_name=onpremer
    onprem_vnet_name=onprem
    onprem_vnet_prefix=172.16.0.0/16
    onprem_ergw_name=onpremergw
    onprem_ergw_pip="${onprem_ergw_name}-pip"
    onprem_vm_subnet_name=vm
    onprem_vm_subnet_prefix=172.16.1.0/24
    onprem_gw_subnet_prefix=172.16.0.0/24
    onprem_vm_name=onpremvm
    onprem_vm_pip_name="${onprem_vm_name}-pip"
    onprem_vm_size=Standard_B1s

    # Create ER circuit
    az network express-route create -n $onprem_er_circuit_name --peering-location $onprem_er_pop -g $rg \
        --bandwidth 50 Mbps --provider $onprem_er_provider -l $onprem_er_location --sku-family MeteredData --sku-tier Standard -o none
    onprem_service_key=$(az network express-route show -n $onprem_er_circuit_name -g $rg --query serviceKey -o tsv)

    # Provision additional VXCs to existing MCR
    if [[ -e "$megaport_script_path" ]]
    then
        $megaport_script_path -q -s=jomore -a=create_vxc -k=$onprem_service_key -n=onprem
    else
        echo "Sorry, I cannot seem to find the script megaport.sh to interact with the Megaport API"
    fi

    # Create VNet and test VM
    az network vnet create -g $rg -n $onprem_vnet_name --address-prefix $onprem_vnet_prefix --subnet-name $onprem_vm_subnet_name --subnet-prefix $onprem_vm_subnet_prefix
    az vm create -n $onprem_vm_name -g $rg -l $location --image ubuntuLTS --generate-ssh-keys --nsg "${onprem_vm_name}-nsg" \
        --public-ip-address $onprem_vm_pip_name --vnet-name $onprem_vnet_name --size $onprem_vm_size --subnet $onprem_vm_subnet_name -o none

    # Create ER Gateway and connect it to circuit
    az network vnet subnet create -g $rg --vnet-name $onprem_vnet_name -n GatewaySubnet --address-prefix $onprem_gw_subnet_prefix -o none
    az network public-ip create -g $rg -n $onprem_ergw_pip --allocation-method Dynamic --sku Basic -o none
    az network vnet-gateway create -g $rg -n $onprem_ergw_name --gateway-type ExpressRoute --sku Standard -l $location --vnet $onprem_vnet_name --public-ip-addresses $onprem_ergw_pip -o none
    onprem_circuit_id=$(az network express-route show -n $onprem_er_circuit_name -g $rg -o tsv --query id) && echo $onprem_circuit_id
    az network vpn-connection create -n onpremcx -g $rg -l $location --vnet-gateway1 $onprem_ergw_name --express-route-circuit2 $onprem_circuit_id -o none
fi

#################################################################
# Optional: time how long it takes to create/delete connections #
#################################################################

# Find out how many spokes are peered with the hub
spokes=$(az network vnet peering list -g $rg --vnet-name $vnet_name -o tsv | wc -l)
# Deleting connection
echo "Deleting the connection with $spokes spokes configured..."
time az network vpn-connection delete -n "${ergw_name}-${er_pop}" -g $rg -o none
# Creating connection
echo "Creating the connection with $spokes spokes configured..."
time az network vpn-connection create -n "${ergw_name}-${er_pop}" -g $rg -l $location --vnet-gateway1 $ergw_name --express-route-circuit2 $circuit_id -o none

# Results
# No of spokes    Deletion time     Creation time
# ============    =============     =============
#            0             2:22              2:33
#           10             6:22              4:03
#           20             8:03              6:03
#           30             8:02              8:34
#           40            11:22             12:34
#           50            13:03             11:35
#           60            14:43             15:04
#           70            19.44

#####################
#    Diagnostics    #
#####################

# Megaport
./megaport.sh -q -s=jomore -a=list_live
# Resources created
az network expressroute list -g $rg -o table
az network gateway list -g $rg -o table
az network vnet list -g $rg -o table
az network route-table list -g $rg -o table
# Effective routes - Hub
vm_nic_id=$(az vm show -n $vm_name -g $rg --query 'networkProfile.networkInterfaces[0].id' -o tsv)
az network nic show-effective-route-table --ids $vm_nic_id -o table
# Effective routes - Spoke
spoke1_vm_nic_id=$(az vm show -n "vm-${er_pop}-spoke1" -g $rg --query 'networkProfile.networkInterfaces[0].id' -o tsv)
spoke1_vm_pip_address=$(az network public-ip show -n "vm-${er_pop}-spoke1-pip" -g $rg --query ipAddress -o tsv)
spoke1_vm_private_ip=$(az vm show -g $rg -n "vm-${er_pop}-spoke1" -d --query privateIps -o tsv)
spoke2_vm_nic_id=$(az vm show -n "vm-${er_pop}-spoke2" -g $rg --query 'networkProfile.networkInterfaces[0].id' -o tsv)
spoke2_vm_pip_address=$(az network public-ip show -n "vm-${er_pop}-spoke2-pip" -g $rg --query ipAddress -o tsv)
spoke2_vm_private_ip=$(az vm show -g $rg -n "vm-${er_pop}-spoke2" -d --query privateIps -o tsv)
az network nic show-effective-route-table --ids $spoke1_vm_nic_id -o table
az network nic show-effective-route-table --ids $spoke2_vm_nic_id -o table
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $spoke1_vm_pip_address "ping -c 5 $spoke2_vm_private_ip"
# Enable/disable BGP route propagation at the spokes
az network route-table update -n spoke-${er_pop} -g $rg --disable-bgp-route-propagation false -o none
az network route-table update -n spoke-${er_pop} -g $rg --disable-bgp-route-propagation true -o none
# Effective routes - Onprem
onprem_vm_nic_id=$(az vm show -n $onprem_vm_name -g $rg --query 'networkProfile.networkInterfaces[0].id' -o tsv)
az network nic show-effective-route-table --ids $onprem_vm_nic_id -o table
vm_pip_address=$(az network public-ip show -n $vm_pip_name -g $rg --query ipAddress -o tsv) && echo $vm_pip_address
onprem_vm_private_ip=$(az vm show -g $rg -n $onprem_vm_name -d --query privateIps -o tsv) && echo $onprem_vm_private_ip
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $vm_pip_address "ping -c 5 $onprem_vm_private_ip"
# ER circuit
az network express-route show -n $er_circuit_name -g $rg -o table
az network express-route update -n $er_circuit_name -g $rg
az network express-route show -n $er_circuit_name -g $rg --query 'peerings' -o table
az network express-route get-stats -n $er_circuit_name -g $rg -o table
az network express-route update -n $er_circuit_name -g $rg  # Refresh
az network express-route peering list --circuit-name $er_circuit_name -g $rg -o table  # Not working before refreshing
az network express-route peering connection list -g $rg -o table --peering-name AzurePrivatePeering --circuit-name $er_circuit_name
az network express-route list-route-tables-summary -g $rg -n $er_circuit_name --path primary --peering-name AzurePrivatePeering --query value -o table
az network express-route list-route-tables -g $rg -n $er_circuit_name --path primary --peering-name AzurePrivatePeering --query value -o table
az network vpn-connection list -g $rg -o table
# ER circuit (onprem)
az network express-route show -n $onprem_er_circuit_name -g $rg -o table
az network express-route update -n $onprem_er_circuit_name -g $rg
az network express-route show -n $onprem_er_circuit_name -g $rg --query 'peerings' -o table
az network express-route get-stats -n $onprem_er_circuit_name -g $rg -o table
az network express-route update -n $onprem_er_circuit_name -g $rg -o none # Refresh
az network express-route peering list --circuit-name $onprem_er_circuit_name -g $rg -o table  # Not working before refreshing
az network express-route peering connection list -g $rg -o table --peering-name AzurePrivatePeering --circuit-name $onprem_er_circuit_name
az network express-route list-route-tables-summary -g $rg -n $onprem_er_circuit_name --path primary --peering-name AzurePrivatePeering --query value -o table
az network express-route list-route-tables -g $rg -n $onprem_er_circuit_name --path primary --peering-name AzurePrivatePeering --query value -o table
az network vpn-connection list -g $rg -o table
# VNG
az network vnet-gateway list-bgp-peer-status -n $ergw_name -g $rg -o table
az network vnet-gateway list-learned-routes -n $ergw_name -g $rg -o table
az network vnet-gateway list-learned-routes -n $ergw_name -g $rg --query 'value[].{LocalAddress:localAddress, Peer:sourcePeer, Network:network, NextHop:nextHop, ASPath: asPath, Origin:origin, Weight:weight}' -o table
az network vnet-gateway list-advertised-routes -n $ergw_name -g $rg -o table --peer 192.168.1.4
# Onprem VNG (if simulating onprem with another VNet/VNG)
az network vnet-gateway list-bgp-peer-status -n $onprem_ergw_name -g $rg -o table
az network vnet-gateway list-learned-routes -n $onprem_ergw_name -g $rg -o table
az network vnet-gateway list-learned-routes -n $onprem_ergw_name -g $rg --query 'value[].{LocalAddress:localAddress, Peer:sourcePeer, Network:network, NextHop:nextHop, ASPath: asPath, Origin:origin, Weight:weight}' -o table
az network vnet-gateway list-advertised-routes -n $onprem_ergw_name -g $rg -o table
# Route server (if there is one, not covered by this script)
rs_name=$(az network routeserver list -g $rg --query '[0].name' -o tsv) && echo $rs_name
nva_private_ip=$(az vm show -g $rg -n "$vm_name" -d --query privateIps -o tsv) && echo $nva_private_ip
az network routeserver peering list --routeserver $rs_name -g $rg -o table
rs_peer_name=$(az network routeserver peering list --routeserver $rs_name -g $rg -o tsv --query '[0].name') && echo $rs_peer_name
az network routeserver peering list-learned-routes -n $rs_peer_name --routeserver $rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
az network routeserver peering list-advertised-routes -n $rs_peer_name --routeserver $rs_name -g $rg --query 'RouteServiceRole_IN_0' -o table
# Flip b2b in the RS
az network routeserver update -n $rs_name -g $rg --allow-b2b-traffic false -o none
az network routeserver update -n $rs_name -g $rg --allow-b2b-traffic true -o none

#######################
#  Cleanup - Danger!  #
#######################

# Delete all VMs
function delete_vm() {
    vm_name=$1
    disk_id=$(az vm show -n $vm_name -g $rg --query storageProfile.osDisk.managedDisk.id -o tsv)
    nic_id=$(az vm show -n $vm_name -g $rg --query 'networkProfile.networkInterfaces[0].id' -o tsv)
    pip_id=$(az network nic show --ids $nic_id --query 'ipConfigurations[0].publicIpAddress.id' -o tsv)
    nsg_id=$(az network nic show --ids $nic_id --query networkSecurityGroup.id -o tsv)
    echo "Deleting VM $vm_name..."
    az vm delete -n $vm_name -g $rg -y
    echo "Deleting disk $disk_id..."
    az disk delete --ids $disk_id -y
    echo "Deleting NIC $nic_id..."
    az network nic delete --ids $nic_id
    echo "Deleting public IP $pip_id..."
    az network public-ip delete --ids $pip_id
    # echo "Deleting NSG $nsg_id..."
    # az network nsg delete --ids $nsg_id
}
vm_list=$(az vm list -g $rg --query '[].name' -o tsv)
while IFS= read -r vm; do
    delete_vm $vm
done <<< "$vm_list"


# Remove MCR from Megaport
# megaport_script_path="/home/jose/repos/azcli/megaport.sh"
# $megaport_script_path -q -s=jomore -a=delete_mcr

# Delete RG
# az group delete -n $rg -y --no-wait
