# Control
cni=overlay                      # azure_pod_subnet, azure or overlay
test_cmds=no                     # yes or no

# Variables
rg=fleetlb
location=eastasia                # eastasia, eastus, etc
aks_node_size=Standard_B2ms
aks_id_name=aksid                # Shared for both clusters
fleet_name=aksfleet
fleet_cred_file=/tmp/fleet_creds
app_name=yadaapi
app_ns=yada
app_image=erjosito/yadaapi:1.0
app_port=8080
# Cluster 1
aks1_location=eastasia
aks1_name=aks1
aks1_vnet_name=aks1Vnet
aks1_vnet_prefix=10.13.76.0/22
aks1_subnet_name=systempool
aks1_subnet_prefix=10.13.76.0/24  # Min /25 with Azure CNI!
aks1_pod_subnet_name=pods
aks1_pod_subnet_prefix=10.13.77.0/24
aks1_service_cidr=10.0.0.0/16
aks1_cred_file=/tmp/aks1_creds
# Cluster 2
aks2_location=eastus
aks2_name=aks1
aks2_vnet_name=aks1Vnet
aks2_vnet_prefix=10.13.80.0/22
aks2_subnet_name=systempool
aks2_subnet_prefix=10.13.80.0/24  # Min /25 with Azure CNI!
aks2_pod_subnet_name=pods
aks2_pod_subnet_prefix=10.13.81.0/24
aks2_service_cidr=10.0.0.0/16
aks2_cred_file=/tmp/aks2_creds


# Install Azure CLI extensions.
function install_azcli_extension() {
    extension_name=$1
    extension_version=$(az extension show -n $extension_name --query version -o tsv 2>/dev/null)
    if [[ -z "$extension_version" ]]
    then
        echo "Azure CLI extension $extension_name not found, installing now..."
        az extension add -n $extension_name -o none
    else
        echo "Azure CLI extension $extension_name found with version $extension_version, trying to upgrade..."
        az extension update -n $extension_name -o none
    fi
    extension_version=$(az extension show -n $extension_name --query version -o tsv 2>/dev/null)
    echo "Azure CLI extension $extension_name installed with version $extension_version"
}
install_azcli_extension fleet

# Create RG and VNets
echo "Creating resource group $rg and VNet $vnet_name in $location..."
az group create -n $rg -l $location -o none --only-show-errors
echo "Creating VNet $aks1_vnet_name in $aks1_location..."
az network vnet create -g $rg -n $aks1_vnet_name --address-prefix $aks1_vnet_prefix -l $aks1_location -o none
az network vnet subnet create -g $rg -n $aks1_subnet_name --vnet-name $aks1_vnet_name --address-prefix $aks1_subnet_prefix -o none --only-show-errors
az network vnet subnet create -g $rg -n $aks1_pod_subnet_name --vnet-name $aks1_vnet_name --address-prefix $aks1_pod_subnet_prefix -o none --only-show-errors
aks1_vnet_id=$(az network vnet show -n $aks1_vnet_name -g $rg --query id -o tsv)
aks1_subnet_id=$(az network vnet subnet show -n $aks_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
aks1_pod_subnet_id=$(az network vnet subnet show -n $pod_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
echo "Creating VNet $aks2_vnet_name in $aks2_location..."
az network vnet create -g $rg -n $aks2_vnet_name --address-prefix $aks2_vnet_prefix -l $aks2_location -o none
az network vnet subnet create -g $rg -n $aks2_subnet_name --vnet-name $aks2_vnet_name --address-prefix $aks2_subnet_prefix -o none --only-show-errors
az network vnet subnet create -g $rg -n $aks2_pod_subnet_name --vnet-name $aks2_vnet_name --address-prefix $aks2_pod_subnet_prefix -o none --only-show-errors
aks2_vnet_id=$(az network vnet show -n $aks1_vnet_name -g $rg --query id -o tsv)
aks2_subnet_id=$(az network vnet subnet show -n $aks_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
aks2_pod_subnet_id=$(az network vnet subnet show -n $pod_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
echo "Peering VNets $aks1_vnet_name and $aks2_vnet_name..."
az network vnet peering create -g $rg -n $aks1_vnet_name-to-$aks2_vnet_name --vnet-name $aks1_vnet_name --remote-vnet $aks2_vnet_id --allow-vnet-access --allow-forwarded-traffic -o none
az network vnet peering create -g $rg -n $aks2_vnet_name-to-$aks1_vnet_name --vnet-name $aks2_vnet_name --remote-vnet $aks1_vnet_id --allow-vnet-access --allow-forwarded-traffic -o none

# Create/retrieve identity for AKS
aks_id_id=$(az identity show -n $aks_id_name -g $rg --query id -o tsv 2>/dev/null)
if [[ -z "$aks_id_id" ]]
then
    echo "Identity $aks_id_name not found, creating a new one..."
    az identity create -n $aks_id_name -g $rg -o none
    aks_id_id=$(az identity show -n $aks_id_name -g $rg --query id -o tsv)
else
    echo "Identity $aks_id_name found with ID $aks_id_id"
fi
aks_id_principal_id=$(az identity show -n $aks_id_name -g $rg --query principalId -o tsv)
sleep 15 # Time for creation to propagate
echo "Assigning Contributor role to AKS identity $aks_id_name in VNet $aks1_vnet_name and $aks2_vnet_name..."
az role assignment create --scope $aks1_vnet_id --assignee $aks_id_principal_id --role Contributor -o none
az role assignment create --scope $aks2_vnet_id --assignee $aks_id_principal_id --role Contributor -o none

# Create AKS clusters
# Create AKS cluster with workload identity enabled.
# 'AGC supports Azure CNI Pod Subnet for both dynamic and static allocation': https://github.com/Azure/AKS/issues/4681
if [[ "$cni" == "azure_pod_subnet" ]]; then
    aks1_cni_options="--network-plugin azure --network-policy azure --vnet-subnet-id $aks1_subnet_id --pod-subnet $aks1_pod_subnet_prefix"
    aks2_cni_options="--network-plugin azure --network-policy azure --vnet-subnet-id $aks2_subnet_id --pod-subnet $aks2_pod_subnet_prefix"
elif [[ "$cni" == "azure_pod_subnet" ]]; then
    aks1_cni_options="--network-plugin azure --network-policy azure --vnet-subnet-id $aks1_subnet_id"
    aks2_cni_options="--network-plugin azure --network-policy azure --vnet-subnet-id $aks2_subnet_id"
elif [[ "$cni" == "overlay" ]]; then
    aks1_cni_options="--network-plugin azure --network-policy cilium --network-dataplane cilium --network-plugin-mode overlay"
    aks2_cni_options="--network-plugin azure --network-policy cilium --network-dataplane cilium --network-plugin-mode overlay"
else  # Default to Azure with node subnet
    aks1_cni_options="--network-plugin azure --network-policy azure --vnet-subnet-id $aks1_subnet_id"
    aks2_cni_options="--network-plugin azure --network-policy azure --vnet-subnet-id $aks2_subnet_id"
fi
# Create cluster
echo "Creating AKS cluster $aks1_name in location $aks1_location in $cni CNI mode..."
az aks create -g $rg -n $aks1_name -l $aks1_location -o none \
    --enable-oidc-issuer --enable-workload-identity \
    -c 1 -s $aks_node_size --generate-ssh-keys -u $(whoami) --service-cidr $aks_service_cidr \
    --enable-managed-identity --assign-identity $aks_id_id \
    ${(z)aks1_cni_options} \
    --load-balancer-sku Standard \
    --node-resource-group "$aks1_name"-iaas-"$RANDOM"
aks1_id=$(az aks show -g $rg -n $aks1_name --query id -o tsv)
echo "Creating AKS cluster $aks2_name in location $aks2_location in $cni CNI mode..."
az aks create -g $rg -n $aks2_name -l $aks2_location -o none \
    --enable-oidc-issuer --enable-workload-identity \
    -c 1 -s $aks_node_size --generate-ssh-keys -u $(whoami) --service-cidr $aks_service_cidr \
    --enable-managed-identity --assign-identity $aks_id_id \
    ${(z)aks2_cni_options} \
    --load-balancer-sku Standard \
    --node-resource-group "$aks2_name"-iaas-"$RANDOM"
aks2_id=$(az aks show -g $rg -n $aks2_name --query id -o tsv)

# Create fleet
echo "Creating fleet $fleet_name in $location..."
az fleet create -g $rg -n $fleet_name -l $location -o none

# Join the member clusters
echo "Joining AKS cluster $aks1_name to fleet $fleet_name..."
az fleet member create -g $rg --fleet-name $fleet_name -n $aks1_name --member-cluster-id $aks1_id -o none
echo "Joining AKS cluster $aks2_name to fleet $fleet_name..."
az fleet member create -g $rg --fleet-name $fleet_name -n $aks2_name --member-cluster-id $aks2_id -o none

# Get credentials
# https://learn.microsoft.com/en-us/azure/kubernetes-fleet/l4-load-balancing
az fleet get-credentials -g $rg -n $fleet_name --file $fleet_cred_file -o none
az aks get-credentials -n $aks1_name -g $rg --file $aks1_cred_file -o none
az aks get-credentials -n $aks2_name -g $rg --file $aks2_cred_file -o none

# Sample workload
KUBECONFIG=$fleet_cred_file kubectl create namespace $app_ns
KUBECONFIG=$fleet_cred_file kubectl create deployment $app_name -n $app_ns --image=$app_image --port=$app_port --replicas=1
KUBECONFIG=$fleet_cred_file kubectl expose deploy $app_name -n $app_ns --port=$app_port --target-port=$app_port
KUBECONFIG=$fleet_cred_file kubectl kubectl apply -f - <<EOF
apiVersion: networking.fleet.azure.com/v1alpha1
kind: ServiceExport
metadata:
  name: $app_name
  namespace: $app_ns
EOF

# Cluster resource placement
KUBECONFIG=$fleet_cred_file kubectl kubectl apply -f - <<EOF
apiVersion: placement.kubernetes-fleet.io/v1
kind: ClusterResourcePlacement
metadata:
  name: $app_name
spec:
  resourceSelectors:
    - group: ""
      version: v1
      kind: Namespace
      name: $app_ns
  policy:
    affinity:
      clusterAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          clusterSelectorTerms:
            - labelSelector:
                matchLabels:
                  fleet.azure.com/location: $aks1_location
                  fleet.azure.com/location: $aks2_location
EOF

# Verify
if [[ "$test_cmds" == "yes" ]]; then
    echo "Pods and serviceExports in $aks1_name:"
    KUBECONFIG=$aks1_cred_file kubectl get pods -n $app_ns
    KUBECONFIG=$aks1_cred_file kubectl get serviceexport -n $app_ns
    echo "Pods and serviceExports in $aks2_name:"
    KUBECONFIG=$aks2_cred_file kubectl get pods -n $app_ns
    KUBECONFIG=$aks2_cred_file kubectl get serviceexport -n $app_ns
    echo "ClusterResourcePlacements in $fleet_name:"
    KUBECONFIG=$fleet_cred_file kubectl get ClusterResourcePlacements
fi

# Multicluster service (on AKS1)
KUBECONFIG=$aks1_cred_file kubectl kubectl apply -f - <<EOF
apiVersion: networking.fleet.azure.com/v1alpha1
kind: MultiClusterService
metadata:
  name: $app_name
  namespace: $app_ns
spec:
  serviceImport:
    name: $app_name
EOF

# Verify MCS
if [[ "$test_cmds" == "yes" ]]; then
    KUBECONFIG=$aks1_cred_file kubectl get multiclusterservice $app_name -n $app_ns
fi