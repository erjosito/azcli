# AGICv2 (aka kubic, aka traffic controller, aka AppGW for containers, aka AGC)
# There are 2 steps to create AGC:
# 1. Create ALB Controller: https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/quickstart-deploy-application-gateway-for-containers-alb-controller?tabs=install-helm-windows
# 2. Create AGC
#    Option a - Managed: https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/quickstart-create-application-gateway-for-containers-managed-by-alb-controller?tabs=new-subnet-aks-vnet
#    Option b - BYOD: https://learn.microsoft.com/en-us/azure/application-gateway/for-containers/quickstart-create-application-gateway-for-containers-byo-deployment?tabs=existing-vnet-subnet

# Variables
rg=agc
location=eastus2
aks_name=agc
aks_node_size=Standard_B2ms
vnet_name=aksVnet
vnet_prefix=10.13.0.0/16
aks_subnet_name=aks1stpool
aks_subnet_prefix=10.13.76.0/24  # Min /25 with Azure CNI!
pod_subnet_name=pods
pod_subnet_prefix=10.13.80.0/24
aks_service_cidr=10.0.0.0/16
aks_id_name=aksid
alb_id_name=albid
alb_deployment_ns=alb
alb_controller_ns=azure-alb-system
alb_ns_name=alb-infra
app_ns=yada
agc_name=appgw4c
agc_frontend_name=test-frontend
agc_subnet_name=subnet-alb
agc_subnet_prefix=10.13.100.0/24

 # Register required resource providers on Azure.
 az provider register --namespace Microsoft.ContainerService
 az provider register --namespace Microsoft.Network
 az provider register --namespace Microsoft.NetworkFunction
 az provider register --namespace Microsoft.ServiceNetworking

 # Install Azure CLI extensions.
 az extension add --name alb

# Create RG and VNets
az group create -n $rg -l $location -o none --only-show-errors
az network vnet create -g $rg -n $vnet_name --address-prefix $vnet_prefix -l $location -o none
az network vnet subnet create -g $rg -n $aks_subnet_name --vnet-name $vnet_name --address-prefix $aks_subnet_prefix -o none --only-show-errors
az network vnet subnet create -g $rg -n $pod_subnet_name --vnet-name $vnet_name --address-prefix $pod_subnet_prefix -o none --only-show-errors
aks_subnet_id=$(az network vnet subnet show -n $aks_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
pod_subnet_id=$(az network vnet subnet show -n $pod_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)

# Create/retrieve identity for AKS
id_id=$(az identity show -n $aks_id_name -g $rg --query id -o tsv 2>/dev/null)
if [[ -z "$id_id" ]]
then
    echo "Identity $aks_id_name not found, creating a new one..."
    az identity create -n $aks_id_name -g $rg -o none
    id_id=$(az identity show -n $aks_id_name -g $rg --query id -o tsv)
else
    echo "Identity $aks_id_name found with ID $id_id"
fi
id_principal_id=$(az identity show -n $aks_id_name -g $rg --query principalId -o tsv)
vnet_id=$(az network vnet show -n $vnet_name -g $rg --query id -o tsv)
sleep 15 # Time for creation to propagate
az role assignment create --scope $vnet_id --assignee $id_principal_id --role Contributor -o none

# Create AKS cluster with workload identity enabled.
# 'AGC supports Azure CNI Pod Subnet for both dynamic and static allocation': https://github.com/Azure/AKS/issues/4681
az aks create -g $rg -n $aks_name -l $location -o none \
    --enable-oidc-issuer --enable-workload-identity \
    -c 1 -s $aks_node_size --generate-ssh-keys -u $(whoami) \
    --enable-managed-identity --assign-identity $id_id \
    --network-plugin azure --vnet-subnet-id $aks_subnet_id --service-cidr $aks_service_cidr \
    --network-policy azure \
    --load-balancer-sku Standard \
    --node-resource-group "$aks_name"-iaas-"$RANDOM"
# Other networking options:
# --network-plugin azure --vnet-subnet-id $aks_subnet_id --pod-subnet-id $pod_subnet_id --service-cidr $aks_service_cidr \
# --network-plugin azure --vnet-subnet-id $aks_subnet_id --service-cidr $aks_service_cidr \
# For existing clusters
# az aks update -g $rg -n $aks_name --enable-oidc-issuer --enable-workload-identity -o none

# Create identity for AGC and configure federation with AKS OIDC issuer
node_rg=$(az aks show -n $aks_name -g $rg --query "nodeResourceGroup" -o tsv)
node_rg_id=$(az group show -n $node_rg --query id -o tsv)
rg_id=$(az group show -n $rg --query id -o tsv)
echo "Creating identity $alb_id_name in resource group $rg..."
az identity create -n $alb_id_name -g $rg -o none --only-show-errors
alb_id_principal_id="$(az identity show -n $alb_id_name -g $rg --query principalId -o tsv)"
echo "Waiting 15 seconds to allow for replication of the identity..."
sleep 15
echo "Applying Reader role to the AKS managed cluster resource group for the newly provisioned identity..."
reader_role=acdd72a7-3385-48ef-bd42-f606fba81ae7
az role assignment create --assignee-object-id $alb_id_principal_id --role $reader_role --scope $node_rg_id -o none --only-show-errors
az role assignment create --assignee-object-id $alb_id_principal_id --role $reader_role --scope $rg_id -o none --only-show-errors
echo "Setting up federation with AKS OIDC issuer..."
aks_oidc_issuer="$(az aks show -n "$aks_name" -g "$rg" --query "oidcIssuerProfile.issuerUrl" -o tsv)"
az identity federated-credential create -n $alb_id_name -g $rg -o none --only-show-errors \
    --identity-name $alb_id_name --issuer "$aks_oidc_issuer" --subject "system:serviceaccount:azure-alb-system:alb-controller-sa"

# Deploy Helm chart
# Notice the version is hard-coded, you can update it with 'helm upgrade'
az aks get-credentials -n $aks_name -g $rg --overwrite-existing
kubectl create ns $alb_deployment_ns
# The --namespace flag doesnt seem to have any effect
helm install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller \
      --namespace $alb_deployment_ns \
      --version 1.4.12 \
      --set albController.namespace=$alb_controller_ns \
      --set albController.podIdentity.clientID=$(az identity show -g $rg -n $alb_id_name --query clientId -o tsv)

# Verify
kubectl get pods -n $alb_controller_ns
kubectl get gatewayclass azure-alb-external -o yaml

#############################
#          Managed          #
#############################

# Create AppGW for containers
az network vnet subnet create -g $rg --vnet-name $vnet_name -n $agc_subnet_name --address-prefix $agc_subnet_prefix --delegations 'Microsoft.ServiceNetworking/trafficControllers' -o none --only-show-errors
agc_subnet_id=$(az network vnet subnet show -g $rg --vnet-name $vnet_name -n $agc_subnet_name --query id --output tsv)

# Delegate roles to the ALB identity
echo "Adding roles for ALB identity..."
node_rg=$(az aks show -n $aks_name -g $rg --query "nodeResourceGroup" -o tsv)
node_rg_id=$(az group show -n $node_rg --query id -o tsv)
rg_id=$(az group show -n $rg --query id -o tsv)
az role assignment create --assignee-object-id $alb_id_principal_id --assignee-principal-type ServicePrincipal --scope $node_rg_id --role "fbc52c3f-28ad-4303-a892-8a056630b8f1" -o none  # AppGw for Containers Configuration Manager role
az role assignment create --assignee-object-id $alb_id_principal_id --assignee-principal-type ServicePrincipal --scope $rg_id --role "fbc52c3f-28ad-4303-a892-8a056630b8f1" -o none  # AppGw for Containers Configuration Manager role
az role assignment create --assignee-object-id $alb_id_principal_id --assignee-principal-type ServicePrincipal --scope $agc_subnet_id --role "4d97b98b-1d4f-4787-a291-c67834d212e7" -o none # Network Contributor

# Create ALB (NOTE: this is only for managed ALB, not for BYO ALB): this will create the ALB resource in Azure
kubectl create ns $alb_ns_name
kubectl apply -f - <<EOF
apiVersion: alb.networking.azure.io/v1
kind: ApplicationLoadBalancer
metadata:
  name: $agc_name
  namespace: $alb_ns_name
spec:
  associations:
  - $agc_subnet_id
EOF
kubectl get ApplicationLoadBalancer -n $alb_ns_name
kubectl describe ApplicationLoadBalancer -n $alb_ns_name

# Create Gateway in k8s: this will create the association and frontends in Azure
alb_id=$(az network alb list -g $node_rg --query '[0].id' -o tsv)
alb_name=$(az network alb list -g $node_rg --query '[0].name' -o tsv)
echo "Creating Gateway in k8s associated to ALB ID $alb_id..."
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: $alb_name
  annotations:
    alb.networking.azure.io/alb-namespace: $alb_ns_name
    alb.networking.azure.io/alb-id: $alb_id
spec:
  gatewayClassName: azure-alb-external
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Same
EOF

k get gateway


#############################
# Bring your own deployment #
#############################

# Create ALB and frontend
az network alb create -g $rg -n $agc_name -o none --only-show-errors
az network alb frontend create -g $rg --alb-name $agc_name -n $agc_frontend_name -o none --only-show-errors
az network vnet subnet create -g $rg --vnet-name $vnet_name -n $agc_subnet_name --address-prefix $agc_subnet_prefix --delegations 'Microsoft.ServiceNetworking/trafficControllers' -o none --only-show-errors
agc_subnet_id=$(az network vnet subnet show -g $rg --vnet-name $vnet_name -n $agc_subnet_name --query id --output tsv)

# Delegate roles to the ALB identity
az role assignment create --assignee-object-id $alb_id_principal_id --scope $node_rg_id --role "fbc52c3f-28ad-4303-a892-8a056630b8f1" -o none  # AppGw for Containers Configuration Manager role
az role assignment create --assignee-object-id $alb_id_principal_id --scope $rg_id --role "fbc52c3f-28ad-4303-a892-8a056630b8f1" -o none  # AppGw for Containers Configuration Manager role
az role assignment create --assignee-object-id $alb_id_principal_id --scope $agc_subnet_id --role "4d97b98b-1d4f-4787-a291-c67834d212e7" -o none # Network Contributor

# Associate the AppGW4C with the subnet
association_name='AppGW4Cassociation'
az network alb association create -g $rg -n $association_name --alb-name $agc_name --subnet $agc_subnet_id -o none --only-show-errors

# Create Gateway in k8s
agc_id=$(az network alb list -g $rg --query '[0].id' -o tsv)
# agc_name=$(az network alb list -g $rg --query '[0].name' -o tsv)
# agc_frontend_name=$(az network alb frontend list --alb-name $agc_name -g $rg --query '[0].name' -o tsv)
echo "Creating Gateway in k8s associated to ALB ID $alb_id and frontend $agc_frontend_name..."
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: $agc_name
  annotations:
    alb.networking.azure.io/alb-namespace: $alb_ns_name
    alb.networking.azure.io/alb-id: $agc_id
spec:
  gatewayClassName: azure-alb-external
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: All
  addresses:
  - type: alb.networking.azure.io/alb-frontend
    value: $agc_frontend_name
EOF

k get gateway
k describe gateway


##################################
#       Diagnostic settings      #
##################################

# Create log analytics workspace
logws_name=$(az monitor log-analytics workspace list -g $rg --query '[0].name' -o tsv)
if [[ -z "$logws_name" ]]
then
    echo "Creating new Log Analytics workspace"
    logws_name=log$RANDOM
    az monitor log-analytics workspace create -n $logws_name -g $rg -o none
else
    echo "Log Analytics workspace $logws_name found"
fi
logws_id=$(az resource list -g $rg -n $logws_name --query '[].id' -o tsv)
logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)
# Enable diagnostics settings for AGC
agc_id=$(az network alb show -n $agc_name -g $rg --query id -o tsv)
az monitor diagnostic-settings create --name agc-diagnostics --resource $agc_id --workspace $logws_id -o none --only-show-errors \
  --logs '[{"category": "TrafficControllerAccessLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'
# Get logs
query="AGCAccessLogs | where TimeGenerated > ago(5m) | project TimeGenerated, ClientIp, HostName, RequestUri, FrontendName, FrontendPort, BackendHost, BackendIp, HttpStatusCode"
az monitor log-analytics query -w $logws_customerid --analytics-query "$query" -o table

##################################
# Sample workload in the cluster #
##################################

# See https://gateway-api.sigs.k8s.io/guides/multiple-ns/

kubectl create ns $app_ns
kubectl create deployment yadaapi -n $app_ns --image=erjosito/yadaapi:1.0 --port=8080 --replicas=1
#kubectl expose deploy yadaapi -n $app_ns --port=8080 --target-port=8080
kubectl apply -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
  name: yadaapi
  namespace: $app_ns
spec:
  type: LoadBalancer
  ports:
  - port: 8080
  selector:
    app: $app_name
EOF


# HTTP route
fqdn=$(kubectl get gateway $agc_name -o jsonpath='{.status.addresses[0].value}') && echo $fqdn
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: yadaapi
  namespace: $app_ns
spec:
  parentRefs:
  - name: $agc_name
    namespace: default
  hostnames:
  - "$fqdn"
  rules:
  - backendRefs:
    - name: yadaapi
      port: 8080
EOF

# Check
k get httproute
k describe httproute yadaapi

# Test
curl "$fqdn/api/healthcheck"

#####################
# Azure Diagnostics #
#####################

az network alb list -g $node_rg -o table
agc_name=$(az network alb list -g $node_rg --query '[0].name' -o tsv)
az network alb association list --alb-name $agc_name -g $node_rg -o table
az network alb frontend list --alb-name $agc_name -g $node_rg -o table

##########################
# Kubernetes Diagnostics #
##########################

# Check the agic pods
kubectl get pods -n azure-alb-system
# Verify the ALB in Azure
az network alb list -g $rg -o table
alb_name=$(az network alb list -g $rg --query '[0].name' -o tsv)
az network alb frontend list -g $rg --alb-name $alb_name -o table
# Verify the ALB in k8s
k get applicationLoadBalancer
# Verify the gatewayclass
kubectl get gatewayclass azure-alb-external -o yaml
# Gateways
k get gateway
k describe gateway
# HTTP routes
k get httproute